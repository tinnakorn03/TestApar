"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const is_type_of_1 = __importDefault(require("is-type-of"));
const ramda_1 = require("ramda");
const validator_1 = __importDefault(require("validator"));
const cRequired = (input, expect = {}) => {
    if (expect.required && input === undefined) {
        return { is: false };
    }
    return { is: true, val: input };
};
const cNullable = (input, expect = {}) => {
    if (expect.nullable && is_type_of_1.default.null(input)) {
        return { is: true, val: input };
    }
    return { is: false, val: input };
};
const cEnum = (input, expect = {}) => {
    if (Array.isArray(expect.enum) && expect.enum.length) {
        return expect.enum.includes(input)
            ? { is: true, val: input }
            : { is: false };
    }
    return { is: true, val: input };
};
const cDefault = (input, expect = {}) => expect.default !== undefined && input === undefined
    ? { is: true, val: expect.default }
    : { is: true, val: input };
const cLength = (input, expect = {}) => {
    var _a, _b;
    if ((expect.minLength != null || expect.maxLength != null) &&
        validator_1.default.isLength(input, { min: (_a = expect.minLength) !== null && _a !== void 0 ? _a : 0, max: (_b = expect.maxLength) !== null && _b !== void 0 ? _b : Infinity })) {
        return { is: true, val: input };
    }
    return { is: false, val: input };
};
const cString = (val, expect) => {
    if (!cRequired(val, expect).is)
        return { is: false };
    if (expect.enum && !cEnum(val, expect).is)
        return { is: false };
    if (expect.format && !cFormat(val, expect).is)
        return { is: false };
    if ((expect.minLength != null || expect.maxLength != null) &&
        !cLength(val, expect).is) {
        return { is: false };
    }
    if (expect.pattern && !(new RegExp(expect.pattern, 'u').test(val))) {
        return { is: false };
    }
    return typeof val === 'string'
        ? { is: true, val: String(val) }
        : { is: false };
};
const cFormat = (val, expect) => {
    if (expect.format === 'email' && !validator_1.default.isEmail(val))
        return { is: false };
    if (expect.format === 'uuid' && !validator_1.default.isUUID(val))
        return { is: false };
    if ((expect.format === 'date' || expect.format === 'date-time') && !validator_1.default.isRFC3339(val))
        return { is: false };
    if (expect.format === 'byte' && !validator_1.default.isBase64(val))
        return { is: false };
    if (expect.format === 'ipv4' && !validator_1.default.isIP(val, 4))
        return { is: false };
    if (expect.format === 'ipv6' && !validator_1.default.isIP(val, 6))
        return { is: false };
    return { is: true, val: String(val) };
};
const cNum = (val, expect) => {
    if (!cRequired(val, expect).is)
        return { is: false };
    if (expect.enum && !cEnum(Number(val), expect).is)
        return { is: false };
    if (isNaN(Number(val)) || val === '')
        return { is: false };
    if (expect.minimum && expect.minimum > Number(val))
        return { is: false };
    if (expect.maximum && expect.maximum < Number(val))
        return { is: false };
    if (expect.exclusiveMinimum && expect.exclusiveMinimum >= Number(val)) {
        return { is: false };
    }
    if (expect.exclusiveMaximum && expect.exclusiveMaximum <= Number(val)) {
        return { is: false };
    }
    if (expect.multipleOf && Number(val) % expect.multipleOf !== 0) {
        return { is: false };
    }
    return { is: true, val: Number(val) };
};
const cBool = (val, expect) => {
    if (!cRequired(val, expect).is)
        return { is: false };
    const condition = (0, ramda_1.cond)([
        [(0, ramda_1.equals)('true'), (0, ramda_1.always)({ is: true, val: true })],
        [(0, ramda_1.equals)('false'), (0, ramda_1.always)({ is: true, val: false })],
        [ramda_1.T, (0, ramda_1.always)({ is: typeof val === 'boolean', val })]
    ]);
    return condition(val);
};
// /**
//  * 对 Object 做检验, 支持嵌套数据
// {
//   aaaa: 'hh',
//   bbbb: 'qq',
// }
// { // expect:
//   type: 'object',
//   properties: {
//     aaaa: { type: 'string', example: 'http://www.baidu.com', required: true },
//     bbbb: { type: 'string', example: 'Bob' }
//     c: { type: 'object', properties: {ii: {type: 'string'}, jj: {type: 'number'}} }
//   }
// }
//  */
const cObject = (input, expect = {}) => {
    if (!cRequired(input, expect).is)
        return { is: false };
    const res = { is: true, val: input };
    if (!is_type_of_1.default.object(input))
        return { is: false };
    if (!expect.properties)
        return res;
    for (const key of Object.keys(expect.properties)) {
        // ignore empty key if not required
        if (!expect.properties[key].required && input[key] === undefined) {
            continue; // eslint-disable-line
        }
        const { is, val } = check(input[key], expect.properties[key]);
        if (!is) {
            console.log('error object properties:', key); // TODO need to update error debug info
            res.is = false;
            break;
        }
        input[key] = is ? val : input[key];
    }
    return res;
};
// {
//   type: 'array', required: true, items: 'string', example: ['填写内容']
// }
const cArray = (input, expect) => {
    if (!cRequired(input, expect).is)
        return { is: false };
    const res = { is: true, val: input };
    if (!Array.isArray(input)) {
        return { is: false };
    }
    if (!expect.items) {
        return res;
    }
    // items 字段为一个对象的情况, 验证该对象内的字段
    if (is_type_of_1.default.object(expect.items)) {
        for (const item of input) {
            const { is } = check(item, expect.items);
            if (!is) {
                res.is = false;
                return res;
            }
        }
    }
    // items 字段为字符串的情况: array 中的内容是基本类型, 或者为object|array类型但不需要校验内部字段
    if (is_type_of_1.default.string(expect.items)) {
        const check = (func) => () => input.length === input.filter(item => func(item)).length;
        const condition = (0, ramda_1.cond)([
            [(0, ramda_1.equals)('string'), check(is_type_of_1.default.string)],
            [(0, ramda_1.equals)('boolean'), check(is_type_of_1.default.boolean)],
            [(0, ramda_1.equals)('number'), check(is_type_of_1.default.number)],
            [(0, ramda_1.equals)('object'), check(is_type_of_1.default.object)],
            [(0, ramda_1.equals)('array'), check(is_type_of_1.default.array)],
            [ramda_1.T, true]
        ]);
        return { is: condition(expect.items), val: input };
    }
    return res;
};
const check = (input, expect) => {
    // 添加对body参数 nullable 情况的支持
    const r = cNullable(input, expect);
    if (r.is === true)
        return r;
    const condition = (0, ramda_1.cond)([
        [(0, ramda_1.equals)('string'), () => cString(input, expect)],
        [(0, ramda_1.equals)('boolean'), () => cBool(input, expect)],
        [(0, ramda_1.equals)('number'), () => cNum(input, expect)],
        [(0, ramda_1.equals)('object'), () => cObject(input, expect)],
        [(0, ramda_1.equals)('array'), () => cArray(input, expect)],
        [ramda_1.T, () => ({ is: true, val: input })] // 其他类型不做校验，直接返回原数据
    ]);
    return condition(expect.type);
};
const Checker = {
    required: cRequired,
    object: cObject,
    string: cString,
    num: cNum,
    bool: cBool,
    default: cDefault,
    array: cArray,
    check
};
exports.default = Checker;
//# sourceMappingURL=data:application/json;base64,